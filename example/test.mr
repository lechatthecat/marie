//TODO verifier errorの場合、エラー内容をわかりやすくする
// TODO 引数の型制限
// TODO 以下の状態のときc, dをけすとおかしなエラーになる
// TODO locals_sizeが常に0なので関数定義後にちゃんとローカル変数の残骸がすべてpopできているか不安 できていなさそうなら定義時にpush時に+1, pop時に-1して残った数字分だけpopする？
// TODO 比較が数値同士、string同士でしかできない どっちかがstring, もう片方がnumberの場合に両方numberに変換してから比較する処理を入れる
// TODO ↑のnumberへの変換に失敗したらエラーを返す処理を入れる 
// TODO GreaterThanOrEruqal, LesserThanOrEuqalもうごくがなぜうごくかわからない
//fn test (a: number, mut b: number, c : number, d:number) : number
//{
//    let mut aa = a / d;
//    println(aa);
//    aa
//}
//println(test(1, 2, 3, 3));

//fn test (mut a: string, b: number)
//{   
//    println(test2(3, 4));
//}

//fn test2 (mut a: string, b: number) : string
//{  
//    "a" 
//}

//test("1", 2);

// 全角文字がコメントアウトされていない場合にエラーになる
// これがエラーになる
// たぶんif文外で定義されたものはblockの引数でわたしてあげないといけない？
//fn a (a: bool) : void
//{
//    if (a) {
//        let mut b = false;
//        if (a) {
//            b = true;
//        }
//        if (b) {
//            println("fuck");
//        }
//    }
//}
// a(true);

// for文の前に関数を書くとエラーになる

for (let mut i = 1; i <= 3; i = i + 1) {
    println(i);
}

fn a () : void
{
    let a = 1;
    let aa = 1;
    let aaa = 1;
    let aaaa = 1;
    for (let mut i = 1; i <= 3; i = i + 1) {
        println(i);
    }
}

a();

fn aa () : void
{
    a();
    let a = 1;
    let aa = 1;
    let aaa = 1;
    let aaaa = 1;
    for (let mut i = a;i <= 3;i = i + 1) {
        println(i);
    }
}

aa();

fn aaa1(n: number, n2: number, n3: number): number
{
    if (10 >= n) {
        return 9999;
    } else if (1 == 1) {
        return 2;
    } else {
        return 4;
    }
}

println(aaa1(9, 0, 0));
println(aaa1(10, 0, 0));
println(aaa1(11, 0, 0));
println(aaa1(12, 0, 0));

fn aaa2(a: bool): number
{
    if (a) {
        if (a) {
            if (false) {
                println(4);
            } else if (a) {
                println(5);
            }
        }
    } else {
        println(6);
    }
}

aaa2(true);

fn getFib(n: number): number
{
    if (n == 0) {
        return 0;
    }
    if (n == 1) {
        return 1;
    }
    //println(n);
    return getFib(n - 2) + getFib(n - 1);
}
println(getFib(20));

fn test2 (n: string) : string 
{
    if (n == "aaaa") {
        return "a";
    }
    return n;
}

fn test1(n: string): string
{
    return test2(n);
}
println(test1("aaaa"));


fn test3(var1: string): string
{
    var1
}

fn test(var0: string): string
{
    let a1 = "test";
    test3(var0)
}
println(test("a"));
println(test("aa"));

let n = 5 + 2^3 + 6;
println(n);

fn calcA (): void
{
    let a = 5 + 2^3 + 6;
    println(a);
}
calcA();

//これがちゃんと計算できない sがずっと0のまま
//fn aa () : void
//{
//    let mut s = 0;
//    for (let i = 1;i <= 2;i = i + 1) {
//        s = s + i;
//    }
//    println(s);
//}
//aa();