use crate::bytecode::bytecode_interpreter::Interpreter;
pub trait CallFuncPointer {
    fn call_func_pointer(&mut self, fn_code: *const u8, arguments: &[i64], arguments_meta: &[i64]) -> Result<(i64, i64), String>;
}

impl CallFuncPointer for Interpreter {
    fn call_func_pointer(
        &mut self,
        fn_code: *const u8,
        arguments: &[i64],
        arguments_meta: &[i64],
    ) -> Result<(i64, i64), String> {
        match arguments.len() {
            0 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _) };
                Ok((v, m))
            },
            1 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            2 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            3 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            4 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            5 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            6 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            7 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            8 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            9 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            10 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            11 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            12 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            13 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            14 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            15 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            16 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            17 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            18 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            19 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            20 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            21 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            22 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            23 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            24 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            25 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            26 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            27 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            28 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            29 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            30 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            31 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            32 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            33 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            34 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            35 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            36 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            37 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            38 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            39 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            40 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            41 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            42 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            43 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            44 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            45 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            46 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            47 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            48 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            49 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            50 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            51 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            52 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            53 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            54 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            55 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            56 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            57 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            58 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            59 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            60 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            61 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            62 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            63 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            64 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            65 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            66 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            67 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            68 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            69 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            70 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            71 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            72 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            73 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            74 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            75 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            76 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            77 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            78 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            79 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            80 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            81 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            82 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            83 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            84 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            85 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            86 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            87 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            88 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            89 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            90 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            91 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            92 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            93 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            94 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            95 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            96 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            97 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            98 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            99 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            100 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            101 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            102 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            103 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            104 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            105 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            106 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            107 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            108 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            109 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            110 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            111 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            112 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            113 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            114 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            115 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            116 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            117 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            118 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            119 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            120 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            121 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            122 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            123 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            124 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            125 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            126 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            127 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            128 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            129 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            130 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[129], arguments_meta[129], arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            131 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[130], arguments_meta[130], arguments[129], arguments_meta[129], arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            132 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[131], arguments_meta[131], arguments[130], arguments_meta[130], arguments[129], arguments_meta[129], arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            133 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[132], arguments_meta[132], arguments[131], arguments_meta[131], arguments[130], arguments_meta[130], arguments[129], arguments_meta[129], arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            134 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[133], arguments_meta[133], arguments[132], arguments_meta[132], arguments[131], arguments_meta[131], arguments[130], arguments_meta[130], arguments[129], arguments_meta[129], arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            135 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[134], arguments_meta[134], arguments[133], arguments_meta[133], arguments[132], arguments_meta[132], arguments[131], arguments_meta[131], arguments[130], arguments_meta[130], arguments[129], arguments_meta[129], arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            136 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[135], arguments_meta[135], arguments[134], arguments_meta[134], arguments[133], arguments_meta[133], arguments[132], arguments_meta[132], arguments[131], arguments_meta[131], arguments[130], arguments_meta[130], arguments[129], arguments_meta[129], arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            137 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[136], arguments_meta[136], arguments[135], arguments_meta[135], arguments[134], arguments_meta[134], arguments[133], arguments_meta[133], arguments[132], arguments_meta[132], arguments[131], arguments_meta[131], arguments[130], arguments_meta[130], arguments[129], arguments_meta[129], arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            138 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[137], arguments_meta[137], arguments[136], arguments_meta[136], arguments[135], arguments_meta[135], arguments[134], arguments_meta[134], arguments[133], arguments_meta[133], arguments[132], arguments_meta[132], arguments[131], arguments_meta[131], arguments[130], arguments_meta[130], arguments[129], arguments_meta[129], arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            139 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[138], arguments_meta[138], arguments[137], arguments_meta[137], arguments[136], arguments_meta[136], arguments[135], arguments_meta[135], arguments[134], arguments_meta[134], arguments[133], arguments_meta[133], arguments[132], arguments_meta[132], arguments[131], arguments_meta[131], arguments[130], arguments_meta[130], arguments[129], arguments_meta[129], arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            140 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[139], arguments_meta[139], arguments[138], arguments_meta[138], arguments[137], arguments_meta[137], arguments[136], arguments_meta[136], arguments[135], arguments_meta[135], arguments[134], arguments_meta[134], arguments[133], arguments_meta[133], arguments[132], arguments_meta[132], arguments[131], arguments_meta[131], arguments[130], arguments_meta[130], arguments[129], arguments_meta[129], arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            141 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[140], arguments_meta[140], arguments[139], arguments_meta[139], arguments[138], arguments_meta[138], arguments[137], arguments_meta[137], arguments[136], arguments_meta[136], arguments[135], arguments_meta[135], arguments[134], arguments_meta[134], arguments[133], arguments_meta[133], arguments[132], arguments_meta[132], arguments[131], arguments_meta[131], arguments[130], arguments_meta[130], arguments[129], arguments_meta[129], arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            142 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[141], arguments_meta[141], arguments[140], arguments_meta[140], arguments[139], arguments_meta[139], arguments[138], arguments_meta[138], arguments[137], arguments_meta[137], arguments[136], arguments_meta[136], arguments[135], arguments_meta[135], arguments[134], arguments_meta[134], arguments[133], arguments_meta[133], arguments[132], arguments_meta[132], arguments[131], arguments_meta[131], arguments[130], arguments_meta[130], arguments[129], arguments_meta[129], arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            143 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[142], arguments_meta[142], arguments[141], arguments_meta[141], arguments[140], arguments_meta[140], arguments[139], arguments_meta[139], arguments[138], arguments_meta[138], arguments[137], arguments_meta[137], arguments[136], arguments_meta[136], arguments[135], arguments_meta[135], arguments[134], arguments_meta[134], arguments[133], arguments_meta[133], arguments[132], arguments_meta[132], arguments[131], arguments_meta[131], arguments[130], arguments_meta[130], arguments[129], arguments_meta[129], arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            144 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[143], arguments_meta[143], arguments[142], arguments_meta[142], arguments[141], arguments_meta[141], arguments[140], arguments_meta[140], arguments[139], arguments_meta[139], arguments[138], arguments_meta[138], arguments[137], arguments_meta[137], arguments[136], arguments_meta[136], arguments[135], arguments_meta[135], arguments[134], arguments_meta[134], arguments[133], arguments_meta[133], arguments[132], arguments_meta[132], arguments[131], arguments_meta[131], arguments[130], arguments_meta[130], arguments[129], arguments_meta[129], arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            145 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[144], arguments_meta[144], arguments[143], arguments_meta[143], arguments[142], arguments_meta[142], arguments[141], arguments_meta[141], arguments[140], arguments_meta[140], arguments[139], arguments_meta[139], arguments[138], arguments_meta[138], arguments[137], arguments_meta[137], arguments[136], arguments_meta[136], arguments[135], arguments_meta[135], arguments[134], arguments_meta[134], arguments[133], arguments_meta[133], arguments[132], arguments_meta[132], arguments[131], arguments_meta[131], arguments[130], arguments_meta[130], arguments[129], arguments_meta[129], arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            146 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[145], arguments_meta[145], arguments[144], arguments_meta[144], arguments[143], arguments_meta[143], arguments[142], arguments_meta[142], arguments[141], arguments_meta[141], arguments[140], arguments_meta[140], arguments[139], arguments_meta[139], arguments[138], arguments_meta[138], arguments[137], arguments_meta[137], arguments[136], arguments_meta[136], arguments[135], arguments_meta[135], arguments[134], arguments_meta[134], arguments[133], arguments_meta[133], arguments[132], arguments_meta[132], arguments[131], arguments_meta[131], arguments[130], arguments_meta[130], arguments[129], arguments_meta[129], arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            147 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[146], arguments_meta[146], arguments[145], arguments_meta[145], arguments[144], arguments_meta[144], arguments[143], arguments_meta[143], arguments[142], arguments_meta[142], arguments[141], arguments_meta[141], arguments[140], arguments_meta[140], arguments[139], arguments_meta[139], arguments[138], arguments_meta[138], arguments[137], arguments_meta[137], arguments[136], arguments_meta[136], arguments[135], arguments_meta[135], arguments[134], arguments_meta[134], arguments[133], arguments_meta[133], arguments[132], arguments_meta[132], arguments[131], arguments_meta[131], arguments[130], arguments_meta[130], arguments[129], arguments_meta[129], arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            148 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[147], arguments_meta[147], arguments[146], arguments_meta[146], arguments[145], arguments_meta[145], arguments[144], arguments_meta[144], arguments[143], arguments_meta[143], arguments[142], arguments_meta[142], arguments[141], arguments_meta[141], arguments[140], arguments_meta[140], arguments[139], arguments_meta[139], arguments[138], arguments_meta[138], arguments[137], arguments_meta[137], arguments[136], arguments_meta[136], arguments[135], arguments_meta[135], arguments[134], arguments_meta[134], arguments[133], arguments_meta[133], arguments[132], arguments_meta[132], arguments[131], arguments_meta[131], arguments[130], arguments_meta[130], arguments[129], arguments_meta[129], arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            149 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[148], arguments_meta[148], arguments[147], arguments_meta[147], arguments[146], arguments_meta[146], arguments[145], arguments_meta[145], arguments[144], arguments_meta[144], arguments[143], arguments_meta[143], arguments[142], arguments_meta[142], arguments[141], arguments_meta[141], arguments[140], arguments_meta[140], arguments[139], arguments_meta[139], arguments[138], arguments_meta[138], arguments[137], arguments_meta[137], arguments[136], arguments_meta[136], arguments[135], arguments_meta[135], arguments[134], arguments_meta[134], arguments[133], arguments_meta[133], arguments[132], arguments_meta[132], arguments[131], arguments_meta[131], arguments[130], arguments_meta[130], arguments[129], arguments_meta[129], arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            150 => {
                let func: unsafe extern "sysv64" fn(*mut Interpreter, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> (i64, i64) =
                    unsafe { std::mem::transmute(fn_code) };
                let (v, m) = unsafe { func(self as *mut _, arguments[149], arguments_meta[149], arguments[148], arguments_meta[148], arguments[147], arguments_meta[147], arguments[146], arguments_meta[146], arguments[145], arguments_meta[145], arguments[144], arguments_meta[144], arguments[143], arguments_meta[143], arguments[142], arguments_meta[142], arguments[141], arguments_meta[141], arguments[140], arguments_meta[140], arguments[139], arguments_meta[139], arguments[138], arguments_meta[138], arguments[137], arguments_meta[137], arguments[136], arguments_meta[136], arguments[135], arguments_meta[135], arguments[134], arguments_meta[134], arguments[133], arguments_meta[133], arguments[132], arguments_meta[132], arguments[131], arguments_meta[131], arguments[130], arguments_meta[130], arguments[129], arguments_meta[129], arguments[128], arguments_meta[128], arguments[127], arguments_meta[127], arguments[126], arguments_meta[126], arguments[125], arguments_meta[125], arguments[124], arguments_meta[124], arguments[123], arguments_meta[123], arguments[122], arguments_meta[122], arguments[121], arguments_meta[121], arguments[120], arguments_meta[120], arguments[119], arguments_meta[119], arguments[118], arguments_meta[118], arguments[117], arguments_meta[117], arguments[116], arguments_meta[116], arguments[115], arguments_meta[115], arguments[114], arguments_meta[114], arguments[113], arguments_meta[113], arguments[112], arguments_meta[112], arguments[111], arguments_meta[111], arguments[110], arguments_meta[110], arguments[109], arguments_meta[109], arguments[108], arguments_meta[108], arguments[107], arguments_meta[107], arguments[106], arguments_meta[106], arguments[105], arguments_meta[105], arguments[104], arguments_meta[104], arguments[103], arguments_meta[103], arguments[102], arguments_meta[102], arguments[101], arguments_meta[101], arguments[100], arguments_meta[100], arguments[99], arguments_meta[99], arguments[98], arguments_meta[98], arguments[97], arguments_meta[97], arguments[96], arguments_meta[96], arguments[95], arguments_meta[95], arguments[94], arguments_meta[94], arguments[93], arguments_meta[93], arguments[92], arguments_meta[92], arguments[91], arguments_meta[91], arguments[90], arguments_meta[90], arguments[89], arguments_meta[89], arguments[88], arguments_meta[88], arguments[87], arguments_meta[87], arguments[86], arguments_meta[86], arguments[85], arguments_meta[85], arguments[84], arguments_meta[84], arguments[83], arguments_meta[83], arguments[82], arguments_meta[82], arguments[81], arguments_meta[81], arguments[80], arguments_meta[80], arguments[79], arguments_meta[79], arguments[78], arguments_meta[78], arguments[77], arguments_meta[77], arguments[76], arguments_meta[76], arguments[75], arguments_meta[75], arguments[74], arguments_meta[74], arguments[73], arguments_meta[73], arguments[72], arguments_meta[72], arguments[71], arguments_meta[71], arguments[70], arguments_meta[70], arguments[69], arguments_meta[69], arguments[68], arguments_meta[68], arguments[67], arguments_meta[67], arguments[66], arguments_meta[66], arguments[65], arguments_meta[65], arguments[64], arguments_meta[64], arguments[63], arguments_meta[63], arguments[62], arguments_meta[62], arguments[61], arguments_meta[61], arguments[60], arguments_meta[60], arguments[59], arguments_meta[59], arguments[58], arguments_meta[58], arguments[57], arguments_meta[57], arguments[56], arguments_meta[56], arguments[55], arguments_meta[55], arguments[54], arguments_meta[54], arguments[53], arguments_meta[53], arguments[52], arguments_meta[52], arguments[51], arguments_meta[51], arguments[50], arguments_meta[50], arguments[49], arguments_meta[49], arguments[48], arguments_meta[48], arguments[47], arguments_meta[47], arguments[46], arguments_meta[46], arguments[45], arguments_meta[45], arguments[44], arguments_meta[44], arguments[43], arguments_meta[43], arguments[42], arguments_meta[42], arguments[41], arguments_meta[41], arguments[40], arguments_meta[40], arguments[39], arguments_meta[39], arguments[38], arguments_meta[38], arguments[37], arguments_meta[37], arguments[36], arguments_meta[36], arguments[35], arguments_meta[35], arguments[34], arguments_meta[34], arguments[33], arguments_meta[33], arguments[32], arguments_meta[32], arguments[31], arguments_meta[31], arguments[30], arguments_meta[30], arguments[29], arguments_meta[29], arguments[28], arguments_meta[28], arguments[27], arguments_meta[27], arguments[26], arguments_meta[26], arguments[25], arguments_meta[25], arguments[24], arguments_meta[24], arguments[23], arguments_meta[23], arguments[22], arguments_meta[22], arguments[21], arguments_meta[21], arguments[20], arguments_meta[20], arguments[19], arguments_meta[19], arguments[18], arguments_meta[18], arguments[17], arguments_meta[17], arguments[16], arguments_meta[16], arguments[15], arguments_meta[15], arguments[14], arguments_meta[14], arguments[13], arguments_meta[13], arguments[12], arguments_meta[12], arguments[11], arguments_meta[11], arguments[10], arguments_meta[10], arguments[9], arguments_meta[9], arguments[8], arguments_meta[8], arguments[7], arguments_meta[7], arguments[6], arguments_meta[6], arguments[5], arguments_meta[5], arguments[4], arguments_meta[4], arguments[3], arguments_meta[3], arguments[2], arguments_meta[2], arguments[1], arguments_meta[1], arguments[0], arguments_meta[0]) };
                Ok((v, m))
            },
            _ => Err("Too many arguments".to_string()),
        }
    }
}
