// values
integer = @{ (ASCII_DIGIT|"0")+ | "-" ~ (ASCII_DIGIT|"0")+ }
decimal = @{ (ASCII_DIGIT|"0")+ ~ "." ~ (ASCII_DIGIT|"0")* | "-" ~ (ASCII_DIGIT|"0")+ ~ "." ~ (ASCII_DIGIT|"0")* }
ident = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
escape_char = { "\\" }
escaped_escape_char = { "\\\\" }
escaped_quote = { escape_char ~ ("'"|"\"") }
single_quote_char = { (!"'" ~ ANY)  }
double_quote_char = { (!"\"" ~ ANY)  }
string = { single_quote_string | double_quote_string }
single_quote_string = ${ "'" ~ (escaped_escape_char | escaped_quote | single_quote_char)* ~ "'" }
double_quote_string = ${ "\"" ~ (escaped_escape_char | escaped_quote | double_quote_char)* ~ "\"" }
// array
array = ${ "[" ~ IGNORED* ~ element ~ (IGNORED* ~ "," ~ IGNORED* ~ element)* ~ IGNORED* ~ "]" }
array_element = ${ (array|ident) ~ ("[" ~ IGNORED* ~ array_index ~ IGNORED* ~ "]")+ }
array_index = ${(number | array_element | ident | left_parenthesis ~ IGNORED* ~ calc_term ~ IGNORED* ~ right_parenthesis)}

// camparison operators
two_equals = ${ "==" }
bigger_than = ${ ">" }
smaller_than = ${ "<" }
e_bigger_than = ${ "=>" }
e_smaller_than = ${ "=<" }
compare = _{ two_equals | bigger_than | smaller_than | e_bigger_than | e_smaller_than }

// or
op_or = ${ "||" }
// and
op_and = ${ "&&" } 
op_and_or = _{ op_or | op_and }

// true false
bool_true = { "true" }
bool_false = { "false" }
val_bool = { bool_true | bool_false }

// calc operators
plus = { "+" }
minus = { "-" }
times = { "*" }
divide = { "/" }
modulus = { "%" }
power = { "^" }
calc = _{ plus | minus | times | divide | modulus | power }

// variables prefix
var_mut = ${ "let" ~ WHITESPACE+ ~ "mut" }
var_const = ${ "let" }
var_prefix = _{ var_mut | var_const }

// White spaces and comments
WHITESPACE = _{ " " | COMMENT }
COMMENT = _{ (("//" ~ (!NEWLINE ~ ANY)*) | ("/*" ~ ( "/**/" | (!"*/" ~ ANY) )* ~ "*/")) }
IGNORED = _{ (WHITESPACE|NEWLINE) }
left_parenthesis = _{ "(" }
right_parenthesis = _{ ")" }
left_curly_brace = _{ "{" }
right_curly_brace = _{ "}" }

// variable assignment
assgmt_expr = { var_prefix ~ IGNORED* ~ ident ~ IGNORED* ~ "=" ~ IGNORED* ~ (expr|element) }
re_assgmt_expr = { ident ~ IGNORED* ~ "=" ~ IGNORED* ~ (expr|element) }
array_re_assgmt_expr = { array_element ~ IGNORED* ~ "=" ~ IGNORED* ~ (expr|element) }

// term
element = _{ string | number | val_bool | array_element | ident | array | left_parenthesis ~ IGNORED* ~ calc_term ~ IGNORED* ~ right_parenthesis }
calc_term = { (function_call|element) ~ IGNORED* ~ (IGNORED* ~ calc ~ IGNORED* ~ (function_call|element) ~ IGNORED*)+ }
number = { decimal | integer }

// string related operators
concatenated_string = !{(function_call|element) ~ IGNORED* ~ ("<<" ~ IGNORED* ~ (function_call|element))+ }

// functions
function_name = ${ (ASCII_ALPHANUMERIC | "_")+ }
function_call = ${ function_name ~ IGNORED* ~ left_parenthesis ~ IGNORED* ~ arguments_for_call? ~ IGNORED* ~ right_parenthesis }
function_define = ${
    "fn" ~ IGNORED* ~ function_name ~ IGNORED* 
    ~ left_parenthesis ~ arguments_for_define? ~ right_parenthesis  
    ~ IGNORED* 
    ~ left_curly_brace ~ IGNORED*
    ~ (stmt_in_function ~ IGNORED*)* ~ (fn_return|last_stmt_in_function)? 
    ~ IGNORED* ~right_curly_brace
}

// function arguments
arguments_for_call = ${ operation ~ IGNORED* ~ ("," ~ IGNORED* ~ operation)* }
arguments_for_define = ${ argument ~ IGNORED* ~ ("," ~ IGNORED* ~ argument)* }
argument = { (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

// range
op_dots = { ".." }
op_dots_inclusive = { "..=" }
first_element = { ident | function_call | integer | left_parenthesis ~ IGNORED* ~ calc_term ~ IGNORED* ~ right_parenthesis }
last_element = { ident | function_call | integer | left_parenthesis ~ IGNORED* ~ calc_term ~ IGNORED* ~ right_parenthesis }
range = ${ first_element ~ IGNORED* ~ (op_dots_inclusive|op_dots) ~ IGNORED* ~ last_element }

// for loop
op_for = _{ "for" }
op_in = _{ "in" }
for_var_mut = ${ "mut" }
for_expr = ${ 
    op_for ~ IGNORED* ~ for_var_mut? ~ IGNORED* ~ ident ~ IGNORED* ~ op_in ~ IGNORED* ~ range ~ IGNORED* ~ left_curly_brace ~ IGNORED*
    ~ (stmt ~ IGNORED*)* ~ fn_return? 
    ~ IGNORED* ~right_curly_brace 
}
for_expr_ident = ${ 
    op_for ~ IGNORED* ~ for_var_mut? ~ IGNORED* ~ ident ~ IGNORED* ~ op_in ~ IGNORED* ~ ident ~ IGNORED* ~ left_curly_brace ~ IGNORED*
    ~ (stmt ~ IGNORED*)* ~ fn_return? 
    ~ IGNORED* ~right_curly_brace 
}
for_expr_array = ${ 
    op_for ~ IGNORED* ~ for_var_mut? ~ IGNORED* ~ ident ~ IGNORED* ~ op_in ~ IGNORED* ~ array ~ IGNORED* ~ left_curly_brace ~ IGNORED*
    ~ (stmt ~ IGNORED*)* ~ fn_return? 
    ~ IGNORED* ~right_curly_brace 
}

// condition
condition = { bool_operation ~ (IGNORED* ~ op_and_or ~ IGNORED* ~ bool_operation)+ }

// if 
op_if = _{ "if" }
op_else = _{ "else" }
op_else_if = _{ op_else ~ IGNORED* ~ op_if }
if_expr = ${ 
    op_if ~ IGNORED* ~ (condition|bool_operation) ~ IGNORED* ~ left_curly_brace ~ IGNORED*
    ~ (stmt_in_function ~ IGNORED*)* ~ fn_return? 
    ~ IGNORED* ~right_curly_brace 
    ~ IGNORED* ~ else_if_expr*
    ~ (IGNORED* ~ else_if_expr)*
    ~ IGNORED* ~ else_expr?
}
else_if_expr = { 
    op_else_if ~ IGNORED* ~ (condition|bool_operation) ~ IGNORED* ~ left_curly_brace ~ IGNORED*
    ~ (stmt_in_function ~ IGNORED*)* ~ fn_return? 
    ~ IGNORED* ~right_curly_brace
}
else_expr = {
    op_else ~ IGNORED* ~ left_curly_brace ~ IGNORED*
    ~ (stmt_in_function ~ IGNORED*)* ~ fn_return? 
    ~ IGNORED* ~right_curly_brace
}

// comparison
comparison = { (calc_term|function_call|element) ~ IGNORED* ~ compare ~ IGNORED* ~ (calc_term|function_call|element) }

// return
op_return = _{ "return" }
fn_return = { IGNORED* ~ op_return ~ IGNORED* ~ operation? ~ IGNORED* ~ end_mark+ }

// deliminater
end_mark = _{ ";" }

// statements and expressions
stmt = _{ expr ~ IGNORED* ~ end_mark+ | expr_without_end_mark }
last_stmt = _{ expr }
stmt_in_function = { (expr_in_function ~ IGNORED* ~ end_mark+ | if_expr | for_expr | for_expr_array | for_expr_ident) }
last_stmt_in_function = { expr_in_function|element }

// expression
expr = {
    assgmt_expr
    | array_re_assgmt_expr
    | re_assgmt_expr
    | function_call
    | concatenated_string
    | calc_term
}
expr_without_end_mark = {
    function_define
    | for_expr
    | for_expr_array
    | for_expr_ident
    | if_expr
}

// expressions except assignment
operation = _{
    calc_term
    | function_call
    | concatenated_string
    | element
}

// expression that can be boolean
bool_operation = ${
    comparison
    | val_bool
    | function_call
    | ident
    | left_parenthesis ~ IGNORED* ~ condition ~ IGNORED* ~ right_parenthesis
}

// expressions allowed in function
expr_in_function = _{
    assgmt_expr
    | array_re_assgmt_expr
    | re_assgmt_expr
    | function_call
    | concatenated_string
    | calc_term
}

// program
program = _{ SOI ~ IGNORED* ~ (stmt ~ IGNORED*)* ~ last_stmt? ~ IGNORED* ~ EOI }
