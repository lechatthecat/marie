use std::mem;

use crate::{bytecode_interpreter::Interpreter, value};

pub trait CallFuncPointer {
    unsafe fn call_func_pointer(&mut self, fn_code: *const u8,arg_count: u8) -> Result<i64, String>;
}

impl CallFuncPointer for Interpreter {
    unsafe fn call_func_pointer(
        &mut self,
        fn_code: *const u8,
        arg_count: u8,
    ) -> Result<i64, String> {
        let mut arguments = Vec::new();
        for i in 0..arg_count {
            let arg = self.peek_by(i as usize);
            if let value::Value::Number(arg_val) = arg.val {
                arguments.push(arg_val.to_bits()  as i64);
            }
        }
        match arg_count {
            0 => {
                // Cast the raw pointer to a typed function pointer. This is unsafe, because
                // this is the critical point where you have to trust that the generated code
                // is safe to be called.
                let fn_code = mem::transmute::<_, fn() -> i64>(fn_code);
                // And now we can call it!
                Ok(fn_code())
            }
            1 => {
                let fn_code = mem::transmute::<_, fn(i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0]))
            }
            2 => {
                let fn_code = mem::transmute::<_, fn(i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0], arguments[1]))
            }
            3 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[2], arguments[1], arguments[0]))
            }
            4 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            5 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            6 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            7 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6]))
            }
            8 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7]))
            }
            9 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8]))
            }
            10 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9]))
            }
            11 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10]))
            }
            12 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11]))
            }
            13 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12]))
            }
            14 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13]))
            }
            15 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14]))
            }
            16 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15]))
            }
            17 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16]))
            }
            18 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17]))
            }
            19 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18]))
            }
            20 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19]))
            }
            21 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20]))
            }
            22 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21]))
            }
            23 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22]))
            }
            24 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23]))
            }
            25 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24]))
            }
            26 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25]))
            }
            27 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26]))
            }
            28 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27]))
            }
            29 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28]))
            }
            30 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29]))
            }
            31 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30]))
            }
            32 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31]))
            }
            33 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32]))
            }
            34 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33]))
            }
            35 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34]))
            }
            36 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35]))
            }
            37 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36]))
            }
            38 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37]))
            }
            39 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38]))
            }
            40 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39]))
            }
            41 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40]))
            }
            42 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41]))
            }
            43 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42]))
            }
            44 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43]))
            }
            45 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44]))
            }
            46 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45]))
            }
            47 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46]))
            }
            48 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47]))
            }
            49 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48]))
            }
            50 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49]))
            }
            51 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50]))
            }
            52 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51]))
            }
            53 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52]))
            }
            54 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53]))
            }
            55 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54]))
            }
            56 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55]))
            }
            57 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56]))
            }
            58 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57]))
            }
            59 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58]))
            }
            60 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59]))
            }
            61 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60]))
            }
            62 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61]))
            }
            63 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62]))
            }
            64 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63]))
            }
            65 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64]))
            }
            66 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65]))
            }
            67 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66]))
            }
            68 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67]))
            }
            69 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68]))
            }
            70 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69]))
            }
            71 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70]))
            }
            72 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71]))
            }
            73 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72]))
            }
            74 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73]))
            }
            75 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74]))
            }
            76 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75]))
            }
            77 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76]))
            }
            78 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77]))
            }
            79 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78]))
            }
            80 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79]))
            }
            81 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80]))
            }
            82 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81]))
            }
            83 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82]))
            }
            84 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83]))
            }
            85 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84]))
            }
            86 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85]))
            }
            87 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86]))
            }
            88 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87]))
            }
            89 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88]))
            }
            90 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89]))
            }
            91 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90]))
            }
            92 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91]))
            }
            93 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92]))
            }
            94 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93]))
            }
            95 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94]))
            }
            96 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95]))
            }
            97 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96]))
            }
            98 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97]))
            }
            99 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98]))
            }
            100 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99]))
            }
            101 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100]))
            }
            102 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101]))
            }
            103 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102]))
            }
            104 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103]))
            }
            105 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104]))
            }
            106 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105]))
            }
            107 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106]))
            }
            108 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107]))
            }
            109 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108]))
            }
            110 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109]))
            }
            111 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110]))
            }
            112 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111]))
            }
            113 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112]))
            }
            114 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113]))
            }
            115 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114]))
            }
            116 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115]))
            }
            117 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116]))
            }
            118 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117]))
            }
            119 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118]))
            }
            120 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119]))
            }
            121 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120]))
            }
            122 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121]))
            }
            123 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122]))
            }
            124 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123]))
                }
            125 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124]))
            }
            126 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125]))
            }
            127 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126]))
            }
            128 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127]))
            }
            129 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128]))
            }
            130 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128],arguments[129]))
            }
            131 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128],arguments[129],arguments[130]))
            }
            132 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128],arguments[129],arguments[130],arguments[131]))
            }
            133 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128],arguments[129],arguments[130],arguments[131],arguments[132]))
            }
            134 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128],arguments[129],arguments[130],arguments[131],arguments[132],arguments[133]))
            }
            135 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128],arguments[129],arguments[130],arguments[131],arguments[132],arguments[133],arguments[134]))
            }
            136 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128],arguments[129],arguments[130],arguments[131],arguments[132],arguments[133],arguments[134],arguments[135]))
            }
            137 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128],arguments[129],arguments[130],arguments[131],arguments[132],arguments[133],arguments[134],arguments[135],arguments[136]))
            }
            138 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128],arguments[129],arguments[130],arguments[131],arguments[132],arguments[133],arguments[134],arguments[135],arguments[136],arguments[137]))
            }
            139 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128],arguments[129],arguments[130],arguments[131],arguments[132],arguments[133],arguments[134],arguments[135],arguments[136],arguments[137],arguments[138]))
            }
            140 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128],arguments[129],arguments[130],arguments[131],arguments[132],arguments[133],arguments[134],arguments[135],arguments[136],arguments[137],arguments[138],arguments[139]))
            }
            141 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128],arguments[129],arguments[130],arguments[131],arguments[132],arguments[133],arguments[134],arguments[135],arguments[136],arguments[137],arguments[138],arguments[139],arguments[140]))
            }
            142 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128],arguments[129],arguments[130],arguments[131],arguments[132],arguments[133],arguments[134],arguments[135],arguments[136],arguments[137],arguments[138],arguments[139],arguments[140],arguments[141]))
            }
            143 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128],arguments[129],arguments[130],arguments[131],arguments[132],arguments[133],arguments[134],arguments[135],arguments[136],arguments[137],arguments[138],arguments[139],arguments[140],arguments[141],arguments[142]))
            }
            144 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128],arguments[129],arguments[130],arguments[131],arguments[132],arguments[133],arguments[134],arguments[135],arguments[136],arguments[137],arguments[138],arguments[139],arguments[140],arguments[141],arguments[142],arguments[143]))
            }
            145 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128],arguments[129],arguments[130],arguments[131],arguments[132],arguments[133],arguments[134],arguments[135],arguments[136],arguments[137],arguments[138],arguments[139],arguments[140],arguments[141],arguments[142],arguments[143],arguments[144]))
            }
            146 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128],arguments[129],arguments[130],arguments[131],arguments[132],arguments[133],arguments[134],arguments[135],arguments[136],arguments[137],arguments[138],arguments[139],arguments[140],arguments[141],arguments[142],arguments[143],arguments[144],arguments[145]))
            }
            147 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128],arguments[129],arguments[130],arguments[131],arguments[132],arguments[133],arguments[134],arguments[135],arguments[136],arguments[137],arguments[138],arguments[139],arguments[140],arguments[141],arguments[142],arguments[143],arguments[144],arguments[145],arguments[146]))
            }
            148 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128],arguments[129],arguments[130],arguments[131],arguments[132],arguments[133],arguments[134],arguments[135],arguments[136],arguments[137],arguments[138],arguments[139],arguments[140],arguments[141],arguments[142],arguments[143],arguments[144],arguments[145],arguments[146],arguments[147]))
            }
            149 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128],arguments[129],arguments[130],arguments[131],arguments[132],arguments[133],arguments[134],arguments[135],arguments[136],arguments[137],arguments[138],arguments[139],arguments[140],arguments[141],arguments[142],arguments[143],arguments[144],arguments[145],arguments[146],arguments[147],arguments[148]))
            }
            150 => {
                let fn_code = mem::transmute::<_, fn(i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21],arguments[22],arguments[23],arguments[24],arguments[25],arguments[26],arguments[27],arguments[28],arguments[29],arguments[30],arguments[31],arguments[32],arguments[33],arguments[34],arguments[35],arguments[36],arguments[37],arguments[38],arguments[39],arguments[40],arguments[41],arguments[42],arguments[43],arguments[44],arguments[45],arguments[46],arguments[47],arguments[48],arguments[49],arguments[50],arguments[51],arguments[52],arguments[53],arguments[54],arguments[55],arguments[56],arguments[57],arguments[58],arguments[59],arguments[60],arguments[61],arguments[62],arguments[63],arguments[64],arguments[65],arguments[66],arguments[67],arguments[68],arguments[69],arguments[70],arguments[71],arguments[72],arguments[73],arguments[74],arguments[75],arguments[76],arguments[77],arguments[78],arguments[79],arguments[80],arguments[81],arguments[82],arguments[83],arguments[84],arguments[85],arguments[86],arguments[87],arguments[88],arguments[89],arguments[90],arguments[91],arguments[92],arguments[93],arguments[94],arguments[95],arguments[96],arguments[97],arguments[98],arguments[99],arguments[100],arguments[101],arguments[102],arguments[103],arguments[104],arguments[105],arguments[106],arguments[107],arguments[108],arguments[109],arguments[110],arguments[111],arguments[112],arguments[113],arguments[114],arguments[115],arguments[116],arguments[117],arguments[118],arguments[119],arguments[120],arguments[121],arguments[122],arguments[123],arguments[124],arguments[125],arguments[126],arguments[127],arguments[128],arguments[129],arguments[130],arguments[131],arguments[132],arguments[133],arguments[134],arguments[135],arguments[136],arguments[137],arguments[138],arguments[139],arguments[140],arguments[141],arguments[142],arguments[143],arguments[144],arguments[145],arguments[146],arguments[147],arguments[148],arguments[149]))
            }
            _ => Err("Too many arguments.".to_string())
        }
    }
}