use std::mem;

use crate::{bytecode_interpreter::Interpreter, value::{self, JitParameter}};

pub trait CallFuncPointer {
    unsafe fn call_func_pointer(&mut self, fn_code: *const u8, arguments: Vec<i64>) -> Result<i64, String>;
}

impl CallFuncPointer for Interpreter {
    unsafe fn call_func_pointer(
        &mut self,
        fn_code: *const u8,
        arguments: Vec<i64>,
    ) -> Result<i64, String> {
        match arguments.len() {
            0 => {
                // Cast the raw pointer to a typed function pointer. This is unsafe, because
                // this is the critical point where you have to trust that the generated code
                // is safe to be called.
                let fn_code = mem::transmute::<_, fn() -> i64>(fn_code);
                // And now we can call it!
                Ok(fn_code())
            }
            1 => {
                let fn_code = mem::transmute::<_, fn(i64) -> i64>(fn_code);
                Ok(fn_code(arguments[0]))
            }
            2 => {
                let fn_code = mem::transmute::<_, fn(i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[1], arguments[0]))
            }
            3 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[2], arguments[1], arguments[0]))
            }
            4 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            5 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            6 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            7 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            8 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            9 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            10 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            11 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            12 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            13 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            14 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            15 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            16 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            17 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            18 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            19 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            20 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            21 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            22 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            23 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            24 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            25 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            26 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            27 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            28 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            29 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            30 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            31 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            32 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            33 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            34 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            35 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            36 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            37 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            38 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            39 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            40 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            41 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            42 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            43 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            44 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            45 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            46 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            47 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            48 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            49 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            50 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            51 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            52 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            53 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            54 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            55 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            56 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            57 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            58 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            59 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            60 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            61 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            62 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            63 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            64 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            65 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            66 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            67 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            68 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            69 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            70 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            71 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            72 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            73 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            74 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            75 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            76 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            77 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            78 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            79 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            80 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            81 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            82 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            83 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            84 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            85 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            86 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            87 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            88 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            89 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            90 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            91 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            92 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            93 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            94 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            95 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            96 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            97 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            98 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            99 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            100 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            101 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            102 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            103 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            104 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            105 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            106 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            107 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            108 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            109 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            110 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            111 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            112 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            113 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            114 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            115 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            116 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            117 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            118 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            119 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            120 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            121 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            122 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            123 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            124 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            125 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            126 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            127 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            128 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            129 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            130 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[129], arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            131 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[130], arguments[129], arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            132 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[131], arguments[130], arguments[129], arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            133 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[132], arguments[131], arguments[130], arguments[129], arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            134 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[133], arguments[132], arguments[131], arguments[130], arguments[129], arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            135 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[134], arguments[133], arguments[132], arguments[131], arguments[130], arguments[129], arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            136 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[135], arguments[134], arguments[133], arguments[132], arguments[131], arguments[130], arguments[129], arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            137 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[136], arguments[135], arguments[134], arguments[133], arguments[132], arguments[131], arguments[130], arguments[129], arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            138 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[137], arguments[136], arguments[135], arguments[134], arguments[133], arguments[132], arguments[131], arguments[130], arguments[129], arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            139 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[138], arguments[137], arguments[136], arguments[135], arguments[134], arguments[133], arguments[132], arguments[131], arguments[130], arguments[129], arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            140 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[139], arguments[138], arguments[137], arguments[136], arguments[135], arguments[134], arguments[133], arguments[132], arguments[131], arguments[130], arguments[129], arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            141 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[140], arguments[139], arguments[138], arguments[137], arguments[136], arguments[135], arguments[134], arguments[133], arguments[132], arguments[131], arguments[130], arguments[129], arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            142 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[141], arguments[140], arguments[139], arguments[138], arguments[137], arguments[136], arguments[135], arguments[134], arguments[133], arguments[132], arguments[131], arguments[130], arguments[129], arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            143 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[142], arguments[141], arguments[140], arguments[139], arguments[138], arguments[137], arguments[136], arguments[135], arguments[134], arguments[133], arguments[132], arguments[131], arguments[130], arguments[129], arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            144 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[143], arguments[142], arguments[141], arguments[140], arguments[139], arguments[138], arguments[137], arguments[136], arguments[135], arguments[134], arguments[133], arguments[132], arguments[131], arguments[130], arguments[129], arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            145 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[144], arguments[143], arguments[142], arguments[141], arguments[140], arguments[139], arguments[138], arguments[137], arguments[136], arguments[135], arguments[134], arguments[133], arguments[132], arguments[131], arguments[130], arguments[129], arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            146 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[145], arguments[144], arguments[143], arguments[142], arguments[141], arguments[140], arguments[139], arguments[138], arguments[137], arguments[136], arguments[135], arguments[134], arguments[133], arguments[132], arguments[131], arguments[130], arguments[129], arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            147 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[146], arguments[145], arguments[144], arguments[143], arguments[142], arguments[141], arguments[140], arguments[139], arguments[138], arguments[137], arguments[136], arguments[135], arguments[134], arguments[133], arguments[132], arguments[131], arguments[130], arguments[129], arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            148 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[147], arguments[146], arguments[145], arguments[144], arguments[143], arguments[142], arguments[141], arguments[140], arguments[139], arguments[138], arguments[137], arguments[136], arguments[135], arguments[134], arguments[133], arguments[132], arguments[131], arguments[130], arguments[129], arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            149 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[148], arguments[147], arguments[146], arguments[145], arguments[144], arguments[143], arguments[142], arguments[141], arguments[140], arguments[139], arguments[138], arguments[137], arguments[136], arguments[135], arguments[134], arguments[133], arguments[132], arguments[131], arguments[130], arguments[129], arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            150 => {
                let fn_code = mem::transmute::<_, fn(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64>(fn_code);
                Ok(fn_code(arguments[149], arguments[148], arguments[147], arguments[146], arguments[145], arguments[144], arguments[143], arguments[142], arguments[141], arguments[140], arguments[139], arguments[138], arguments[137], arguments[136], arguments[135], arguments[134], arguments[133], arguments[132], arguments[131], arguments[130], arguments[129], arguments[128], arguments[127], arguments[126], arguments[125], arguments[124], arguments[123], arguments[122], arguments[121], arguments[120], arguments[119], arguments[118], arguments[117], arguments[116], arguments[115], arguments[114], arguments[113], arguments[112], arguments[111], arguments[110], arguments[109], arguments[108], arguments[107], arguments[106], arguments[105], arguments[104], arguments[103], arguments[102], arguments[101], arguments[100], arguments[99], arguments[98], arguments[97], arguments[96], arguments[95], arguments[94], arguments[93], arguments[92], arguments[91], arguments[90], arguments[89], arguments[88], arguments[87], arguments[86], arguments[85], arguments[84], arguments[83], arguments[82], arguments[81], arguments[80], arguments[79], arguments[78], arguments[77], arguments[76], arguments[75], arguments[74], arguments[73], arguments[72], arguments[71], arguments[70], arguments[69], arguments[68], arguments[67], arguments[66], arguments[65], arguments[64], arguments[63], arguments[62], arguments[61], arguments[60], arguments[59], arguments[58], arguments[57], arguments[56], arguments[55], arguments[54], arguments[53], arguments[52], arguments[51], arguments[50], arguments[49], arguments[48], arguments[47], arguments[46], arguments[45], arguments[44], arguments[43], arguments[42], arguments[41], arguments[40], arguments[39], arguments[38], arguments[37], arguments[36], arguments[35], arguments[34], arguments[33], arguments[32], arguments[31], arguments[30], arguments[29], arguments[28], arguments[27], arguments[26], arguments[25], arguments[24], arguments[23], arguments[22], arguments[21], arguments[20], arguments[19], arguments[18], arguments[17], arguments[16], arguments[15], arguments[14], arguments[13], arguments[12], arguments[11], arguments[10], arguments[9], arguments[8], arguments[7], arguments[6], arguments[5], arguments[4], arguments[3], arguments[2], arguments[1], arguments[0]))
            }
            _ => Err("Too many arguments.".to_string())
        }
    }
}